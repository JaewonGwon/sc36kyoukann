{"version":3,"sources":["../src/presentable.js"],"names":["SYMBOL","Symbol","for","presentable","targetComponent","prototype","Object","defineProperty","get","getPresenter","getPresentableData","render","data","Presenter","instance"],"mappings":";;;;;;;;AAYA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,SAASC,OAAOC,GAAP,CAAW,aAAX,CAAf;AAEA;;;;AAGO,SAASC,WAAT,CAAqBC,eAArB,EAAsC;AAC3C,MAAI,4BAAcA,eAAd,CAAJ,EACE,OAAOA,eAAP;AAEF,MAAIC,YAAYD,gBAAgBC,SAAhC,CAJ2C,CAM3C;;AACAC,SAAOC,cAAP,CAAsBF,SAAtB,EAAiCL,MAAjC,EAAyC;AACvCQ,OADuC,iBACjC;AACJ,aAAO,IAAP;AACD;AAHsC,GAAzC,EAP2C,CAa3C;;AACA,MAAI,CAACH,UAAUI,YAAf,EAA6B;AAC3BJ,cAAUI,YAAV,GAAyB,YAAW;AAClC,aAAO,+BAAiB,IAAjB,CAAP;AACD,KAFD;AAGD,GAlB0C,CAoB3C;;;AACA,MAAI,CAACJ,UAAUK,kBAAf,EAAmC;AACjCL,cAAUK,kBAAV,GAA+B,YAAW;AACxC,aAAO,qCAAuB,IAAvB,CAAP;AACD,KAFD;AAGD,GAzB0C,CA2B3C;;;AACA,MAAI,CAACL,UAAUM,MAAf,EAAuB;AACrBN,cAAUM,MAAV,GAAmB,YAAW;AAC5B,UAAIC,OAAO,KAAKF,kBAAL,EAAX;AACA,UAAIG,YAAY,KAAKJ,YAAL,EAAhB;AACA,aAAO,CAACI,SAAD,GACH,IADG,GAEH,6BAAC,SAAD;AAAW;AAAeC,oBAAU;AAAzB,WAAkCF,IAAlC;AAAX,QAFJ;AAGD,KAND;AAOD;;AAED,SAAOR,eAAP;AACD;;eAEcD,W","file":"presentable.js","sourcesContent":["// Licensed under the Apache License, Version 2.0 (the “License”); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\nimport isPresentable from './isPresentable'\nimport React, { Component } from 'react'\nimport resolvePresenter from './resolvePresenter'\nimport resolvePresentableData from './resolvePresentableData'\n\nconst SYMBOL = Symbol.for('presentable')\n\n/**\n * Add support for presenters for the target component.\n */\nexport function presentable(targetComponent) {\n  if (isPresentable(targetComponent))\n    return targetComponent\n\n  let prototype = targetComponent.prototype\n\n  // Add a marker used to detect if the component is presentable.\n  Object.defineProperty(prototype, SYMBOL, {\n    get() {\n      return true\n    }\n  })\n\n  // Add the default implementation for “getPresenter”.\n  if (!prototype.getPresenter) {\n    prototype.getPresenter = function() {\n      return resolvePresenter(this)\n    }\n  }\n\n  // Add the default implementation for “getPresentableData”.\n  if (!prototype.getPresentableData) {\n    prototype.getPresentableData = function() {\n      return resolvePresentableData(this)\n    }\n  }\n\n  // Default rendering method.\n  if (!prototype.render) {\n    prototype.render = function() {\n      let data = this.getPresentableData()\n      let Presenter = this.getPresenter()\n      return !Presenter\n        ? null\n        : <Presenter presentable={{ instance: this, ...data }}/>\n    }\n  }\n\n  return targetComponent\n}\n\nexport default presentable\n"]}