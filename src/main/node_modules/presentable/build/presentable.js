"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.presentable = presentable;
exports.default = void 0;

var _isPresentable = _interopRequireDefault(require("./isPresentable"));

var _react = _interopRequireWildcard(require("react"));

var _resolvePresenter = _interopRequireDefault(require("./resolvePresenter"));

var _resolvePresentableData = _interopRequireDefault(require("./resolvePresentableData"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var SYMBOL = Symbol.for('presentable');
/**
 * Add support for presenters for the target component.
 */

function presentable(targetComponent) {
  if ((0, _isPresentable.default)(targetComponent)) return targetComponent;
  var prototype = targetComponent.prototype; // Add a marker used to detect if the component is presentable.

  Object.defineProperty(prototype, SYMBOL, {
    get: function get() {
      return true;
    }
  }); // Add the default implementation for “getPresenter”.

  if (!prototype.getPresenter) {
    prototype.getPresenter = function () {
      return (0, _resolvePresenter.default)(this);
    };
  } // Add the default implementation for “getPresentableData”.


  if (!prototype.getPresentableData) {
    prototype.getPresentableData = function () {
      return (0, _resolvePresentableData.default)(this);
    };
  } // Default rendering method.


  if (!prototype.render) {
    prototype.render = function () {
      var data = this.getPresentableData();
      var Presenter = this.getPresenter();
      return !Presenter ? null : _react.default.createElement(Presenter, {
        presentable: _extends({
          instance: this
        }, data)
      });
    };
  }

  return targetComponent;
}

var _default = presentable;
exports.default = _default;
//# sourceMappingURL=presentable.js.map