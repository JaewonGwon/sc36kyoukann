{"version":3,"sources":["../src/resolveFlair.js"],"names":["normalizeFlair","resolvedFlair","flair","presenter","replace","trim","EXTRACTOR","resolveFlair","target","resolvedTheme","undefined","COMPONENT_THEME","componentTheme","FLAIRS","flairs","PRESENTERS","presenters","DEFAULT_FLAIR","default","DEFAULT_PRESENTER","PATTERN","props","MATCHES","exec","TARGET_FLAIRS","TARGET_PRESENTER","split","TARGET","EXTRACTED","Array","isArray","join"],"mappings":";;;;;;;;AAYA;;AAEA;;;;AAdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA;;;AAGA,SAASA,cAAT,CAAwBC;AAAxB;AAAA;AAAA;AAAmE;AAAA,MAC3DC,KAD2D,GACtCD,aADsC,CAC3DC,KAD2D;AAAA,MACpDC,SADoD,GACtCF,aADsC,CACpDE,SADoD;AAEjE,SAAO;AACLD,WAAOA,MAAME,OAAN,CAAc,MAAd,EAAsB,GAAtB,EAA2BC,IAA3B,EADF;AAELF;AAFK,GAAP;AAID;;AAED,IAAMG,YAAY,0CAAlB;AAEA;;;;;;;;AAOO,SAASC,YAAT,CAAsBC;AAAtB;AAAA,EAA2CC;AAA3C;AAAA;AAAA;AAAsF;AAAA;;AAC3F,MAAI,CAAC,0BAAYD,MAAZ,CAAL,EACE,OAAOE,SAAP;AAEF,MAAMC,kBAAkBF,aAAlB,aAAkBA,aAAlB,uBAAkBA,cAAeG,cAAvC;AACA,MAAI,CAACD,eAAL,EACE,OAAOD,SAAP;AAEF,MAAMG,SAASF,gBAAgBG,MAA/B;AACA,MAAMC,aAAaJ,gBAAgBK,UAAnC;AAEA,MAAI,CAACH,MAAD,IAAW,CAACE,UAAhB,EACE,OAAOL,SAAP;AAEF,MAAMO,gBAAgBJ,OAAOA,OAAOK,OAAd,KAA0B,EAAhD;AACA,MAAMC,oBAAoBJ,WAAWA,WAAWG,OAAtB,KAAkC,EAA5D;AAEA,MAAIhB,QAAQe,aAAZ;AACA,MAAId,YAAYgB,iBAAhB;AACA,MAAMC,2BAAUZ,OAAOa,KAAjB,kDAAU,cAAcnB,KAA9B;AAEA,MAAI,CAACkB,OAAL,EACE,OAAOpB,eAAe;AAAEE,gBAAF;AAASC;AAAT,GAAf,CAAP,CAtByF,CAwB3F;;AACA,MAAMmB,UAAUhB,UAAUiB,IAAV,CAAeH,OAAf,CAAhB;AACA,MAAI,CAACE,OAAL,EACE,OAAOtB,eAAe;AAAEE,gBAAF;AAASC;AAAT,GAAf,CAAP;AAEF,MAAMqB,gBAAgBF,QAAQ,CAAR,CAAtB;AACA,MAAMG,mBAAmBH,QAAQ,CAAR,CAAzB,CA9B2F,CAgC3F;;AACA,MAAIG,gBAAJ,EACEtB,YAAYY,WAAWU,gBAAX,KAAgCN,iBAA5C,CAlCyF,CAoC3F;;AACA,MAAI,CAACK,aAAL,EACE,OAAOxB,eAAe;AAAEE,gBAAF;AAASC;AAAT,GAAf,CAAP,CAtCyF,CAwC3F;;AACAD,UAAQ,EAAR;AAzC2F;AAAA;AAAA;;AAAA;AA0C3F,yBAAqBsB,cAAcE,KAAd,CAAoB,KAApB,CAArB,8HAAiD;AAAA,UAAtCC,OAAsC;AAC/C,UAAMC,YAAYf,OAAOc,OAAP,CAAlB;AACA,UAAI,CAACC,SAAL,EACE;AACF1B,0BAAa2B,MAAMC,OAAN,CAAcF,SAAd,IAA2BA,UAAUG,IAAV,CAAe,GAAf,CAA3B,GAAiDH,SAA9D;AACD;AA/C0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiD3F,SAAO5B,eAAe;AAAEE,gBAAF;AAASC;AAAT,GAAf,CAAP;AACD;;eAEcI,Y","file":"resolveFlair.js","sourcesContent":["// Licensed under the Apache License, Version 2.0 (the “License”); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\nimport isThemeable from './isThemeable'\nimport type { ResolvedTheme } from '../resolveTheme'\nimport { Component } from 'react'\n\nexport type ResolvedFlair = {|\n  flair?:string,\n  presenter?:Component<*>\n|}\n\n/**\n * Remove unnecessary spaces in resolved flairs.\n */\nfunction normalizeFlair(resolvedFlair:ResolvedFlair):ResolvedFlair {\n  let { flair, presenter } = resolvedFlair\n  return {\n    flair: flair.replace(/\\s+/g, ' ').trim(),\n    presenter\n  }\n}\n\nconst EXTRACTOR = /\\s*(\\w+(?:\\s+\\w+)*)?(?:\\s*!\\s*(\\w+))?\\s*/\n\n/**\n * Returns the resulting flair and presenter from the resolved theme using the\n * specified pattern.\n *\n * @param pattern\n * A pattern\n */\nexport function resolveFlair(target:Component<*>, resolvedTheme:ResolvedTheme):ResolvedFlair {\n  if (!isThemeable(target))\n    return undefined\n\n  const COMPONENT_THEME = resolvedTheme?.componentTheme\n  if (!COMPONENT_THEME)\n    return undefined\n\n  const FLAIRS = COMPONENT_THEME.flairs\n  const PRESENTERS = COMPONENT_THEME.presenters\n\n  if (!FLAIRS && !PRESENTERS)\n    return undefined\n\n  const DEFAULT_FLAIR = FLAIRS[FLAIRS.default] || {}\n  const DEFAULT_PRESENTER = PRESENTERS[PRESENTERS.default] || {}\n\n  let flair = DEFAULT_FLAIR\n  let presenter = DEFAULT_PRESENTER\n  const PATTERN = target.props?.flair\n\n  if (!PATTERN)\n    return normalizeFlair({ flair, presenter })\n\n  // Extract the flair and presenter portion from the pattern passed.\n  const MATCHES = EXTRACTOR.exec(PATTERN)\n  if (!MATCHES)\n    return normalizeFlair({ flair, presenter })\n\n  const TARGET_FLAIRS = MATCHES[1]\n  const TARGET_PRESENTER = MATCHES[2]\n\n  // If there's a custom presenter, try to extract it.\n  if (TARGET_PRESENTER)\n    presenter = PRESENTERS[TARGET_PRESENTER] || DEFAULT_PRESENTER\n\n  // There are no custom flairs.\n  if (!TARGET_FLAIRS)\n    return normalizeFlair({ flair, presenter })\n\n  // Extract each flair from the component theme and concatenate into a string.\n  flair = ''\n  for (const TARGET of TARGET_FLAIRS.split(/\\s+/)) {\n    const EXTRACTED = FLAIRS[TARGET]\n    if (!EXTRACTED)\n      continue\n    flair += ` ${Array.isArray(EXTRACTED) ? EXTRACTED.join(' ') : EXTRACTED}`\n  }\n\n  return normalizeFlair({ flair, presenter })\n}\n\nexport default resolveFlair\n"]}