"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveFlair = resolveFlair;
exports.default = void 0;

var _isThemeable = _interopRequireDefault(require("./isThemeable"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Licensed under the Apache License, Version 2.0 (the “License”); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

/**
 * Remove unnecessary spaces in resolved flairs.
 */
function normalizeFlair(resolvedFlair
/*:ResolvedFlair*/
)
/*:ResolvedFlair*/
{
  var flair = resolvedFlair.flair,
      presenter = resolvedFlair.presenter;
  return {
    flair: flair.replace(/\s+/g, ' ').trim(),
    presenter: presenter
  };
}

var EXTRACTOR = /\s*(\w+(?:\s+\w+)*)?(?:\s*!\s*(\w+))?\s*/;
/**
 * Returns the resulting flair and presenter from the resolved theme using the
 * specified pattern.
 *
 * @param pattern
 * A pattern
 */

function resolveFlair(target
/*:Component<*>*/
, resolvedTheme
/*:ResolvedTheme*/
)
/*:ResolvedFlair*/
{
  var _target$props;

  if (!(0, _isThemeable.default)(target)) return undefined;
  var COMPONENT_THEME = resolvedTheme === null || resolvedTheme === void 0 ? void 0 : resolvedTheme.componentTheme;
  if (!COMPONENT_THEME) return undefined;
  var FLAIRS = COMPONENT_THEME.flairs;
  var PRESENTERS = COMPONENT_THEME.presenters;
  if (!FLAIRS && !PRESENTERS) return undefined;
  var DEFAULT_FLAIR = FLAIRS[FLAIRS.default] || {};
  var DEFAULT_PRESENTER = PRESENTERS[PRESENTERS.default] || {};
  var flair = DEFAULT_FLAIR;
  var presenter = DEFAULT_PRESENTER;
  var PATTERN = (_target$props = target.props) === null || _target$props === void 0 ? void 0 : _target$props.flair;
  if (!PATTERN) return normalizeFlair({
    flair: flair,
    presenter: presenter
  }); // Extract the flair and presenter portion from the pattern passed.

  var MATCHES = EXTRACTOR.exec(PATTERN);
  if (!MATCHES) return normalizeFlair({
    flair: flair,
    presenter: presenter
  });
  var TARGET_FLAIRS = MATCHES[1];
  var TARGET_PRESENTER = MATCHES[2]; // If there's a custom presenter, try to extract it.

  if (TARGET_PRESENTER) presenter = PRESENTERS[TARGET_PRESENTER] || DEFAULT_PRESENTER; // There are no custom flairs.

  if (!TARGET_FLAIRS) return normalizeFlair({
    flair: flair,
    presenter: presenter
  }); // Extract each flair from the component theme and concatenate into a string.

  flair = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = TARGET_FLAIRS.split(/\s+/)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _TARGET = _step.value;
      var EXTRACTED = FLAIRS[_TARGET];
      if (!EXTRACTED) continue;
      flair += " ".concat(Array.isArray(EXTRACTED) ? EXTRACTED.join(' ') : EXTRACTED);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return normalizeFlair({
    flair: flair,
    presenter: presenter
  });
}

var _default = resolveFlair;
exports.default = _default;
//# sourceMappingURL=resolveFlair.js.map