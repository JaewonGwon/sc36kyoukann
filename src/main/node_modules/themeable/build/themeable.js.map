{"version":3,"sources":["../src/themeable.js"],"names":["SYMBOL","Symbol","for","decorateComponent","identifier","targetComponent","prototype","getThemeableIdentifier","constructor","name","contextTypes","theme","object","Object","defineProperty","get","oldGetPresentableData","getPresentableData","result","call","RESOLVED_THEME","RESOLVED_FLAIR","flair","className","props","themeable","identifierOrComponent"],"mappings":";;;;;;;;AAYA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASO,IAAMA,SAASC,OAAOC,GAAP,CAAW,WAAX,CAAf;;;AAEP,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;AACrC,SAAO,2BAAmB;AACxB;AACA,QAAI,CAAC,gCAAcC,eAAd,CAAL,EACE,8BAAYA,eAAZ;AAEF,QAAIC,YAAYD,gBAAgBC,SAAhC,CALwB,CAOxB;AACA;;AACAA,cAAUC,sBAAV,GAAmC,YAAW;AAAA;;AAC5C,4BAAOH,UAAP,qDAAqBE,UAAUE,WAAV,CAAsBC,IAA3C;AACD,KAFD;;AAIA,QAAI,0BAAYJ,eAAZ,CAAJ,EACE,OAAOA,eAAP,CAdsB,CAgBxB;AACA;;AACA,QAAI,CAACA,gBAAgBK,YAArB,EACEL,gBAAgBK,YAAhB,GAA+B,EAA/B;AACFL,oBAAgBK,YAAhB,CAA6BC,KAA7B,GAAqC,mBAAUC,MAA/C,CApBwB,CAsBxB;;AACAC,WAAOC,cAAP,CAAsBR,SAAtB,EAAiCN,MAAjC,EAAyC;AACvCe,SADuC,iBACjC;AACJ,eAAO,IAAP;AACD;AAHsC,KAAzC,EAvBwB,CA6BxB;AACA;;AACA,QAAIC,wBAAwBV,UAAUW,kBAAtC,CA/BwB,CAiCxB;;AACAX,cAAUW,kBAAV,GAA+B,YAAW;AACxC,UAAIC,SAASF,sBAAsBG,IAAtB,CAA2B,IAA3B,CAAb;AAEA,UAAMC,iBAAiB,2BAAa,IAAb,CAAvB;AACA,UAAMC,iBAAiB,2BAAa,IAAb,EAAmBD,cAAnB,CAAvB;;AAEA,UAAIC,cAAJ,EAAoB;AAAA,YACZC,KADY,GACFD,cADE,CACZC,KADY;AAAA,YAEZC,SAFY,GAEEL,OAAOM,KAFT,CAEZD,SAFY;;AAIlB,YAAID,KAAJ,EAAW;AACTJ,iBAAOM,KAAP,CAAaD,SAAb,GAAyBA,sBAClBA,SADkB,cACLD,KADK,IAErBA,KAFJ;AAGD;AACF;;AAED,aAAOJ,OAAOM,KAAP,CAAaF,KAApB;AACA,aAAOJ,OAAOM,KAAP,CAAab,KAApB;AACA,aAAOO,MAAP;AACD,KApBD,CAlCwB,CAwDxB;;;AACA,WAAOb,eAAP;AACD,GA1DD;AA2DD;AAED;;;;;;;;;;AAQO,SAASoB,SAAT,CAAmBC;AAAnB;AAAA,EAAqE;AAC1E;AACA,MAAIA,yBAAyBA,sBAAsBpB,SAAtB,4BAA7B,EACE,OAAOH,oBAAoBuB,qBAApB,CAAP,CAHwE,CAI1E;;AACA,SAAOvB,kBAAkBuB,qBAAlB,CAAP;AACD;;eAEcD,S","file":"themeable.js","sourcesContent":["// Licensed under the Apache License, Version 2.0 (the “License”); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\nimport isThemeable from './isThemeable'\nimport PropTypes from 'prop-types'\nimport resolveFlair from './resolveFlair'\nimport resolveTheme from './resolveTheme'\nimport { Component } from 'react'\nimport { isPresentable, presentable } from 'presentable'\n\nexport const SYMBOL = Symbol.for('themeable')\n\nfunction decorateComponent(identifier) {\n  return targetComponent => {\n    // Modify the target component to enable support for presenters if necessary.\n    if (!isPresentable(targetComponent))\n      presentable(targetComponent)\n\n    let prototype = targetComponent.prototype\n\n    // Allow the identifier to be modified without affecting an already themeable\n    // component.\n    prototype.getThemeableIdentifier = function() {\n      return identifier ?? prototype.constructor.name\n    }\n\n    if (isThemeable(targetComponent))\n      return targetComponent\n\n    // The theme attribute in the context will be defined by the “ContextTheme”\n    // component.\n    if (!targetComponent.contextTypes)\n      targetComponent.contextTypes = {}\n    targetComponent.contextTypes.theme = PropTypes.object\n\n    // Marker used to detect if the component is themeable.\n    Object.defineProperty(prototype, SYMBOL, {\n      get() {\n        return true\n      }\n    })\n\n    // Used to combine the presentable’s data with the new attributes from the\n    // themeable logic.\n    let oldGetPresentableData = prototype.getPresentableData\n\n    // Combine presentable data with themeable data.\n    prototype.getPresentableData = function() {\n      let result = oldGetPresentableData.call(this)\n\n      const RESOLVED_THEME = resolveTheme(this)\n      const RESOLVED_FLAIR = resolveFlair(this, RESOLVED_THEME)\n\n      if (RESOLVED_FLAIR) {\n        let { flair } = RESOLVED_FLAIR\n        let { className } = result.props\n\n        if (flair) {\n          result.props.className = className\n            ? `${className} ${flair}`\n            : flair\n        }\n      }\n\n      delete result.props.flair\n      delete result.props.theme\n      return result\n    }\n\n    // The final component with theming support.\n    return targetComponent\n  }\n}\n\n/**\n * Enables theming support for a ReactJS component.\n *\n * @param identifierOrComponent\n * A unique identifier used to select the “ComponentTheme” inside the “Theme” or\n * the component to enable theming. If the component has no identifier, it’ll\n * only support themes passed directly to it.\n */\nexport function themeable(identifierOrComponent:string|Class<Component<*>>) {\n  // It’s a component.\n  if (identifierOrComponent && identifierOrComponent.prototype instanceof Component)\n    return decorateComponent()(identifierOrComponent)\n  // It’s an identifier or bogus identifier.\n  return decorateComponent(identifierOrComponent)\n}\n\nexport default themeable\n"]}