{"version":3,"sources":["../src/resolveTheme.js"],"names":["_resolveTheme","source","data","identifier","undefined","theme","componentTheme","componentThemes","resolveTheme","target","context","props","IDENTIFIER","getThemeableIdentifier"],"mappings":";;;;;;;;AAYA;;AACA;;;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,SAASA,aAAT,CAAuBC;AAAvB;AAAA,EAAsCC;AAAtC;AAAA,EAAmDC;AAAnD;AAAA,EAAsE;AACpE,MAAI,CAACD,IAAL,EACE,OAAOE,SAAP;AAFkE,MAI9DC,KAJ8D,GAIpDH,IAJoD,CAI9DG,KAJ8D;AAKpE,MAAI,CAACA,KAAL,EACE,OAAOD,SAAP;;AAEF,MAAI,sBAAQC,KAAR,CAAJ,EAAoB;AAClB,WAAO,CAACF,UAAD,GACHC,SADG,GAEH;AACAE,sBAAgBD,MAAME,eAAN,CAAsBJ,UAAtB,CADhB;AAEAA,4BAFA;AAGAF,oBAHA;AAIAI;AAJA,KAFJ;AAQD;;AAED,SAAO;AACLC,oBAAgBD,KADX;AAELF,gBAAYC,SAFP;AAGLH,kBAHK;AAILI,WAAOD;AAJF,GAAP;AAMD;;;;;;;;;AASD;;;AAGO,SAASI,YAAT,CAAsBC;AAAtB;AAAA;AAAA;AAAyD;AAC9D,MAAI,CAAC,0BAAYA,MAAZ,CAAL,EACE,OAAOL,SAAP;AAF4D,MAGxDM,OAHwD,GAGrCD,MAHqC,CAGxDC,OAHwD;AAAA,MAG/CC,KAH+C,GAGrCF,MAHqC,CAG/CE,KAH+C;AAI9D,MAAMC,aAAaH,OAAOI,sBAAP,EAAnB;AACA,SAAOb,cAAc,UAAd,EAA0BW,KAA1B,EAAiCC,UAAjC,KACFZ,cAAc,SAAd,EAAyBU,OAAzB,EAAkCE,UAAlC,CADE,IAEFR,SAFL;AAGD;;eAEcI,Y","file":"resolveTheme.js","sourcesContent":["// Licensed under the Apache License, Version 2.0 (the “License”); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\nimport isTheme from './isTheme'\nimport isThemeable from './isThemeable'\n\nfunction _resolveTheme(source:string, data:Object, identifier:string) {\n  if (!data)\n    return undefined\n\n  let { theme } = data\n  if (!theme)\n    return undefined\n\n  if (isTheme(theme)) {\n    return !identifier\n      ? undefined\n      : {\n        componentTheme: theme.componentThemes[identifier],\n        identifier,\n        source,\n        theme\n      }\n  }\n\n  return {\n    componentTheme: theme,\n    identifier: undefined,\n    source,\n    theme: undefined\n  }\n}\n\nexport type ResolvedTheme = {\n  componentTheme:ComponentTheme,\n  identifier?:string,\n  source:string,\n  theme?:Theme\n}\n\n/**\n * Tries to resolve the component theme from the properties and context.\n */\nexport function resolveTheme(target:Component<*>):ResolvedTheme {\n  if (!isThemeable(target))\n    return undefined\n  let { context, props } = target\n  const IDENTIFIER = target.getThemeableIdentifier()\n  return _resolveTheme('property', props, IDENTIFIER)\n    || _resolveTheme('context', context, IDENTIFIER)\n    || undefined\n}\n\nexport default resolveTheme\n"]}